building:
rgbasm -L -o hello-world.o hello-world.asm

rgblink -o hello-world.gb hello-world.o

rgbfix -v -p 0xFF hello-world.gb
gameboy needs a header. -v means it can run, like, verified

decimal
$hexadecimal
%binary



rgblink hello-world.o -m hello-world.map
generates the range of memory.
    SECTION: $05a6-$07e5 ($0240 bytes) ["Tilemap"]


registers: GPR: a, b, c, d, e, h, l
    a -> acc
    bc, de, hl -> can be combined to form 16 bit


Comments
    ; ok.

Instructions
    directive -> RGBASM shit
    instruction -> written directly into the rom.

a section is a range of memory, only known at compile time.
I assume its for some kind of optimization. Like hot access and cold?
    just assume that one section should contain things that “go together”
    All instructions must be in a section.
SECTION "Header", ROM0[$100]
    you can also have a empty header, the name is just for good code practice
    ROM0 is memory type:
        Honestly, idfk what this is.
    You can force it to start somewhere [$address]
        $100 - $14f
    

    ds $150 - @, 0
        ds is used for statically allocating memory.
        $150 - @, how many bytes
        0, what to set the value to.
    
    @
        current memory address

ld a, [de]
    Each cell has a memory address, from 0 to ~
        On the gb, each cell is one byte.
    Two main types of memory on the gb.
        ROM
            Memory that you cannot write to.
                Some old rom is literally acid engraved with data.
        RAM
            Memory that you can read and write to.
        
        You use one number to access the different types of memory.
            even if the memory is on different chips.
            the cpu knows which chip to ask and subtracts accordingly,
                ie 2719 may be on chip #2, and the address in the chip is 719
    The gb has 2^16, addresses, 65536, from $0000 to $ffff
        Start	End	    Name	Description
        $0000	$7FFF	ROM	    The game ROM, supplied by the cartridge.
        $8000	$9FFF	VRAM	Video RAM, where graphics are stored and arranged.
        $A000	$BFFF	SRAM	Save RAM, optionally supplied by the cartridge to save data to.
        $C000	$DFFF	WRAM	Work RAM, general-purpose RAM for the game to store things in.
        $FE00	$FE9F	OAM	    Object Attribute Memory, where “objects” are stored.
        FF00	$FF7F	I/O	    Neither ROM nor RAM, but this is where you control the console.
        $FF80	$FFFE	HRAM	High RAM, a tiny bit of general-purpose RAM which can be accessed faster.
        $FFFF	$FFFF	IE	    A lone I/O byte that’s separated from the rest for some reason.
    57760 of memory that you can actually access, the rest is no touchy, -nintendo

    Labels
        symbols, attaches a name to a byte of memory
            MemoryLabel:
                ; refers to the byte right after itself, (aka the first byte of the instruction of the load under this.)
                ld a, 0
        writing out the label name is the same as writing out the address of the byte it goes to.

    Dereference - like c/c++, pointer -> value
        "read at address ~"
         ld a, b -> copy b into a
         ld a, [$5414] -> copy the data stored at address 5414 into a
            if de contains the value 5414
            this does the same thing.
    
    [hli]
        short hand for [hl+]
        incremented just after the memory is accessed.
            []
    

    
ds $150 - @, 0 ; Make room for the header
    Zone of memory from $0104 to $014F
        Hold shit like title, compatibility, size, checksums and power up logos.
        Only ROMs sent to nintendo have fully correct headers
            we just need to get it past the boot checks.

        Modern emulators need to know the hardware they need to emulate found in the header.

    Boot ROM    
        Header is tied to the boot ROM
            When the console powers up, the cpu starts executing instructions starting at $0000
                The ROM entry point is $0100
            Before this is a small program called the boot ROM -> fucking burned into the silicon of the cpu.
                Does the startup animation but also checks the ROM header.
                    Verifies the Nintendo Logo and checksums, for piracy and verification.

    rgbfix
        Writes the ROM's header
            rgblink does not produce a valid ROM so the rgbfix fixes it.
        There are many options, for now we only use
            -v which makes it valid, producing the valid Logo & checksums
            -p 0xFF pads the ROM to the next valid size, using $FF as the filler byte. 
        
        
Operations & flags:
    inc: increment
    dec: decrement

    Flags: special purpose register -> one bit each (I think)
        Z: zero flag
        N: addition/subtraction
        H: Half-carry
        C: Carry
    
    add a, b
    sub a, b
    overflows and underflow set/unset the carry flag.
    cp: compare: a sub without actually doing the sub, instead it sets the Z and C flags.
        Z is set if a == b, not set otherwise
        C is set if a < b, else a >= b (like this bc of sub, if set, it became negative a - b)
        

    PC: Program counter, another special purpose register
    jp: Jump to location
    jr: Jump relative
    call: call a subroutine
    ret: return from a subroutine

    jp can have a condition:
        jp z label
        z: Z is set
        nz: if Z is not set
        c: if C is set
        nc: if C is not set.

Tracing: Dark mode.
    ctr g -> go to memory address
    f5: step
    ctr back -> restart
    f8: resume
    f9: pause

    
Gameboy 2BPP:
    only has 4 colors, therefor you only need "two bits per pixel"
    Gameboy displays graphics with 8x8 pixel tiles.
        64 pixels per tile -> 128 bits or 16 bytes per tile.
    two bytes represent a row.
        ie: a5, 8b
            a5: 10100101
            8b: 10001011
            dc: 30102123
    
    it is much easier to group them in 8x8 pixels and manipulate them instead.
        you can also increase it to meta tiles and store 16x16

Pallets:
    Three pallets for B&W gameboys:
        one for background called BGP
        two for objects, OBP1, OBP2
    
    0-4, white to black, (different gameboys have different color pallets)

    Encoding:
        One byte, four group of two bits
            ie, E4 -> 11-10-01-00
                1B -> 00-01-10-11

Tilemap:
    Grid of tiles
    tiles are referred to by a ID, (idx)
        ID are stored in bytes, so there are 256 possibly IDs.
            Some IDs refer to sever tiles at the same time.
            384 total tiles.
             blocks of 128, three of them.


        



        